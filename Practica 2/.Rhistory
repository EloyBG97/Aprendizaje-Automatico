if(prevE >= postE)
betterw <- w
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
if(Ein(datos, vini, label) < Ein(datos, betterw, label))
sol <-pasoARecta(vini)
else
sol <- pasoARecta(betterw)
list(sol, iter)
}
ajuste <- PLA_pocket(data_unif, label_unif,1000, c(0,0,0))
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
set.seed(2)
## ------------------------------------------------------------------------
# por defecto genera 2 puntos entre [0,1] de 2 dimensiones
simula_unif = function (N=2,dims=2, rango = c(0,1)){
m = matrix(runif(N*dims, min=rango[1], max=rango[2]),
nrow = N, ncol=dims, byrow=T)
m
}
## -----------------------------------------------------------------------
# función simula_gaus(N, dim, sigma) que genera un
# conjunto de longitud N de vectores de dimensión dim, conteniendo números
# aleatorios gaussianos de media 0 y varianzas dadas por el vector sigma.
# por defecto genera 2 puntos de 2 dimensiones
simula_gaus = function(N=2,dim=2,sigma){
if (missing(sigma)) stop("Debe dar un vector de varianzas")
sigma = sqrt(sigma)  # para la generación se usa sd, y no la varianza
if(dim != length(sigma)) stop ("El numero de varianzas es distinto de la dimensión")
simula_gauss1 = function() rnorm(dim, sd = sigma) # genera 1 muestra, con las desviaciones especificadas
m = t(replicate(N,simula_gauss1())) # repite N veces, simula_gauss1 y se hace la traspuesta
m
}
data_unif <- simula_unif(50, 2, c(-50,50))
plot(x=data_unif[,1], y=data_unif[,2],xlab = 'x_axis', ylab = 'y_axis')
data_gaus <- simula_gaus(50, 2, c(5,7))
plot(x=data_gaus[,1], y=data_gaus[,2],xlab = 'x_axis', ylab = 'y_axis')
## ------------------------------------------------------------------------
#  simula_recta(intervalo) una funcion que calcula los parámetros
#  de una recta aleatoria, y = ax + b, que corte al cuadrado [-50,50]x[-50,50]
#  (Para calcular la recta se simulan las coordenadas de 2 ptos dentro del
#  cuadrado y se calcula la recta que pasa por ellos),
#  se pinta o no segun el valor de parametro visible
simula_recta = function (intervalo = c(-1,1), visible=F){
ptos = simula_unif(2,2,intervalo) # se generan 2 puntos
a = (ptos[1,2] - ptos[2,2]) / (ptos[1,1]-ptos[2,1]) # calculo de la pendiente
b = ptos[1,2]-a*ptos[1,1]  # calculo del punto de corte
if (visible) {  # pinta la recta y los 2 puntos
if (dev.cur()==1) # no esta abierto el dispositivo lo abre con plot
plot(1, type="n", xlim=intervalo, ylim=intervalo)
points(ptos,col=3)  #pinta en verde los puntos
abline(b,a,col=3)   # y la recta
}
c(a,b) # devuelve el par pendiente y punto de corte
}
sign <- function(x,y,r){
s <- (y - r[1]*x - r[2])
if(s == abs(s)) return(1)
return (-1)
}
recta <- simula_recta()
label_unif <- c()
for(i in 1:length(data_unif[,1]))
label_unif[i] <- sign(data_unif[i,1], data_unif[i,2], recta)
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
curve(recta[1]*x+recta[2],add=TRUE)
positive_label <- label_unif[label_unif==1]
negative_label <- label_unif[label_unif==-1]
positive_noise <- sample(1:length(positive_label), length(positive_label)*0.1)
negative_noise <- sample(1:length(negative_label), length(negative_label)*0.1)
noise <- c(positive_noise,negative_noise)
noisy_label <- label_unif
for(i in 1:length(noise)){
if(noisy_label[noise[i]] == 1)
noisy_label[noise[i]] <- -1
else
noisy_label[noise[i]] <- 1
}
plot(x=data_unif[,1], y=data_unif[,2], col=noisy_label+3, xlab = 'x_axis', ylab = 'y_axis')
curve(recta[1]*x+recta[2],add=TRUE)
## funcion para pintar la frontera de la función
# a la que se pueden añadir puntos, y etiquetas
pintar_frontera = function(f,rango=c(-50,50)) {
x=y=seq(rango[1],rango[2],length.out = 500)
z = outer(x,y,FUN=f)
#if (dev.cur()==1) # no esta abierto el dispositivo lo abre con plot
plot(x=data_unif[,1], y=data_unif[,2], col=noisy_label+3, xlab = 'x_axis', ylab = 'y_axis')
contour(x,y,z, levels = 1:20, xlim =rango, ylim=rango, xlab = "x", ylab = "y", add = T)
}
f1 <- function(x,y){
s <- ((x-10)**2+(y-20)**2-400)
s
}
pintar_frontera(f1)
f2 <- function(x,y) {
s <- (0.5*(x+10)**2+(y-20)**2-400)
s
}
pintar_frontera(f2)
f3 <- function(x,y){
s <- (0.5*(x-10)**2-(y+20)**2-400)
s
}
pintar_frontera(f3)
f4 <- function(x,y){
s <- (y - 20*x**2-5*x+3)
s
}
pintar_frontera(f4)
pasoARecta= function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[2]/w[3]
b = -w[1]/w[3]
c(a,b)
}
signo <- function(x){
if(x == 0) return(0)
else if(x == abs(x)) return (1)
return(-1)
}
ajusta_PLA <- function(datos, label, max_iter, vini){
label[label==-1] <- 0
cambio <- TRUE
datos <- cbind(1, datos)
iter <- 1
while(cambio && iter <= max_iter){
w <- vini
for(i in 1:length(label)){
if(signo(t(w)%*%datos[i,]) != label[i]){
w <- w + label[i]*datos[i,]
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
sol <-pasoARecta(vini)
list(sol, iter)
}
ajuste <- ajusta_PLA(data_unif, label_unif, 10e4, c(0,0,0))
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
cat("Iteraciones: ", ajuste[[2]], "Value: (", c(0,0,0),")")
iter_medio <- ajuste[[2]]
values <- simula_unif(10,3)
for(i in 1:length(values[,1])){
ajuste <- ajusta_PLA(data_unif,label_unif, 10e4, values[i,])
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
cat("Iteraciones: ", ajuste[[2]], "Inicio: (", values[i,],")")
iter_medio <- ajuste[[2]] + iter_medio
}
cat("Nº Iteraciones Medio: ", iter_medio / (length(values[,1])+1))
cat("El numero medio de iteraciones es pequeño debido a que estamos trabajando con \nun conjunto separable")
ajuste <- ajusta_PLA(data_unif, label_unif, Inf, c(0,0,0))
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=noisy_label+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
cat("Iteraciones: ", ajuste[[2]], "Value: (", c(0,0,0),")")
iter_medio <- ajuste[[2]]
for(i in 1:length(values[,1])){
ajuste <- ajusta_PLA(data_unif,noisy_label, Inf, values[i,])
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=noisy_label+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
cat("Iteraciones: ", ajuste[[2]], "Inicio: (", values[i,], ")")
iter_medio <- ajuste[[2]] + iter_medio
}
cat("Nº Iteraciones Medio: ", iter_medio / (length(values[,1])+1))
cat("El numero medio de iteraciones es más grande debido a que estamos trabajando con \nun conjunto no separable")
Logistic_Reg <- function(w, x, y, N, mu = 0.01, epsilon=10e-10){
x <- cbind(1, x)
prev_w <- c(0,0,0)
Error <- 1.0
iter <- 1
while(Error >= epsilon && iter < 100000 && (abs(sum(prev_w) - sum(w)) > 0.01)){
TrainingIndex <- sample(1:length(y), N)
TrainingDataPoints <- x[TrainingIndex,]
TrainingLabelValues <- y[TrainingIndex]
prev_w <- w
Gradient <- (-TrainingLabelValues*TrainingDataPoints)/c(1+exp(TrainingLabelValues*TrainingDataPoints%*%w))
w <- w - mu*(1/N)*colSums(Gradient)
Error <- colSums(log(1+ exp(-TrainingLabelValues*TrainingDataPoints%*%w)))
iter <- iter+1
}
sol <- list()
sol[[1]] <- pasoARecta(w)
sol[[2]] <- Error
sol
}
L_w <- Logistic_Reg(c(1,1,1), data_unif, label_unif, 32)
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
w <- L_w[[1]]
E_out <- L_w[[2]]
curve(w[1]*x+w[2], add = TRUE)
data_test <- simula_unif(1000, 2, c(-50,50))
label_test <- c()
for(i in 1:length(data_test[,1]))
label_test[i] <- sign(data_test[i,1], data_test[i,2], recta)
plot(x=data_test[,1], y=data_test[,2], col=label_test+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
cat("El valor de Eout es", E_out, "\n")
Ein <- function(datos, w, label) {
sum <- 0
for (i in 1:length(label)) {
if(signo(t(w)%*%datos[i,]) != label[i]){
sum <- sum + 1
}
}
e <- sum / length(label)
e
}
PLA_pocket <- function(datos, label, max_iter, vini){
label[label==-1] <- 0
cambio <- TRUE
datos <- cbind(1, datos)
iter <- 1
betterw <- vini
while(cambio && iter <= max_iter){
w <- vini
for(i in 1:length(label)){
if(signo(t(w)%*%datos[i,]) != label[i]){
prevE <- Ein(datos, betterw, label)
w <- w + label[i]*datos[i,]
postE <- Ein(datos, w, label)
if(prevE >= postE)
betterw <- w
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
if(Ein(datos, vini, label) < Ein(datos, betterw, label))
sol <-pasoARecta(vini)
else
sol <- pasoARecta(betterw)
list(sol, iter)
}
ajuste <- PLA_pocket(data_unif, label_unif,1000, c(0,0,0))
w <- ajuste[[1]]
plot(x=data_unif[,1], y=data_unif[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
Ein <- function(datos, w, label) {
sum <- 0
for (i in 1:length(label)) {
if(signo(t(w)%*%datos[i,]) != label[i]){
sum <- sum + 1
}
}
e <- sum / length(label)
e
}
PLA_pocket <- function(datos, label, max_iter, vini){
label[label==-1] <- 0
cambio <- TRUE
datos <- cbind(1, datos)
iter <- 1
betterw <- vini
while(cambio && iter <= max_iter){
w <- vini
for(i in 1:length(label)){
if(signo(t(w)%*%datos[i,]) != label[i]){
prevE <- Ein(datos, betterw, label)
w <- w + label[i]*datos[i,]
postE <- Ein(datos, w, label)
if(prevE >= postE)
betterw <- w
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
if(Ein(datos, vini, label) < Ein(datos, betterw, label))
sol <-pasoARecta(vini)
else
sol <- pasoARecta(betterw)
list(sol, iter)
}
#   Esta función se encarga de generar una lista de matrices de 16*16, que contiene cada una
#   un numero (representado por su escala de grises).
generarLista <- function(D){
nDatos <- length(D$V1)
lista <- list()
for(i in 1:nDatos){
matrizActual <- D[i,]
lista[[i]] <- matrix(as.numeric(matrizActual[2:257]), nrow=16, ncol=16)
}
lista
}
#   Esta función se encarga de calcular la simetría de una matriz
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
#   Esta función se encarga de calcular la intensidad de una matriz utilizando la función
#   mean()
fIntensidad <- function(M){
mean(M)
}
# Se cambia el directorio de trabajo, y se carga en una variable el fichero zip.train, del que se va a obtener la matriz de 1 y 5
setwd("./datos")
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digitos48.train <- digit.train[digit.train$V1==4 | digit.train$V1==8,]
lista48 <- generarLista(digitos48.train)
#   Se crea un vector de simetrías, que se obtienen al utilizar la funcion fsimetria
vSimetrias <- c()
for(i in 1:length(lista48)){
vSimetrias[i] <- fSimetria(lista48[[i]])
}
#   Se crea un vector de simetrias, que se obtienen al utilizar la función fintensidad
vIntensidades <- c()
for(i in 1:length(lista48)){
vIntensidades[i] <- fIntensidad(lista48[[i]])
}
#   Se obtienen las etiquetas de los 1 y 5, modificando la de 1 a -1 y la de 5 a 1, para poder utilizar la regresion lineal
#   Con las simetrias e intensidades se crea la matriz de datos, y se calcula la regresion lineal con esta matriz y las etiquetas
#   Antes de llamar a la función, es necesario añadir una columna de 1s a la matriz datos
vEtiquetas <- digitos48.train$V1
vEtiquetas[vEtiquetas==8] <- 1
vEtiquetas[vEtiquetas==4] <- -1
datos <- matrix(c(rep(1, length(vIntensidades)),vIntensidades, vSimetrias), ncol = 3)
ajuste <- PLA_pocket(datos, vEtiquetas, 1000, c(0,0,0))
Ein <- function(datos, w, label) {
sum <- 0
for (i in 1:length(label)) {
if(signo(t(w)%*%datos[i,]) != label[i]){
sum <- sum + 1
}
}
e <- sum / length(label)
e
}
PLA_pocket <- function(datos, label, max_iter, vini){
label[label==-1] <- 0
cambio <- TRUE
#datos <- cbind(1, datos)
iter <- 1
betterw <- vini
while(cambio && iter <= max_iter){
w <- vini
for(i in 1:length(label)){
if(signo(t(w)%*%datos[i,]) != label[i]){
prevE <- Ein(datos, betterw, label)
w <- w + label[i]*datos[i,]
postE <- Ein(datos, w, label)
if(prevE >= postE)
betterw <- w
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
if(Ein(datos, vini, label) < Ein(datos, betterw, label))
sol <-pasoARecta(vini)
else
sol <- pasoARecta(betterw)
list(sol, iter)
}
#   Esta función se encarga de generar una lista de matrices de 16*16, que contiene cada una
#   un numero (representado por su escala de grises).
generarLista <- function(D){
nDatos <- length(D$V1)
lista <- list()
for(i in 1:nDatos){
matrizActual <- D[i,]
lista[[i]] <- matrix(as.numeric(matrizActual[2:257]), nrow=16, ncol=16)
}
lista
}
#   Esta función se encarga de calcular la simetría de una matriz
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
#   Esta función se encarga de calcular la intensidad de una matriz utilizando la función
#   mean()
fIntensidad <- function(M){
mean(M)
}
# Se cambia el directorio de trabajo, y se carga en una variable el fichero zip.train, del que se va a obtener la matriz de 1 y 5
setwd("./datos")
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digitos48.train <- digit.train[digit.train$V1==4 | digit.train$V1==8,]
lista48 <- generarLista(digitos48.train)
#   Se crea un vector de simetrías, que se obtienen al utilizar la funcion fsimetria
vSimetrias <- c()
for(i in 1:length(lista48)){
vSimetrias[i] <- fSimetria(lista48[[i]])
}
#   Se crea un vector de simetrias, que se obtienen al utilizar la función fintensidad
vIntensidades <- c()
for(i in 1:length(lista48)){
vIntensidades[i] <- fIntensidad(lista48[[i]])
}
#   Se obtienen las etiquetas de los 1 y 5, modificando la de 1 a -1 y la de 5 a 1, para poder utilizar la regresion lineal
#   Con las simetrias e intensidades se crea la matriz de datos, y se calcula la regresion lineal con esta matriz y las etiquetas
#   Antes de llamar a la función, es necesario añadir una columna de 1s a la matriz datos
vEtiquetas <- digitos48.train$V1
vEtiquetas[vEtiquetas==8] <- 1
vEtiquetas[vEtiquetas==4] <- -1
datos <- matrix(c(rep(1, length(vIntensidades)),vIntensidades, vSimetrias), ncol = 3)
ajuste <- PLA_pocket(datos, vEtiquetas, 1000, c(0,0,0))
w <- ajuste[[1]]
plot(x=vIntensidades[,1], y=vSimetrias[,2], col=label_unif+3, xlab = 'x_axis', ylab = 'y_axis')
Ein <- function(datos, w, label) {
sum <- 0
for (i in 1:length(label)) {
if(signo(t(w)%*%datos[i,]) != label[i]){
sum <- sum + 1
}
}
e <- sum / length(label)
e
}
PLA_pocket <- function(datos, label, max_iter, vini){
label[label==-1] <- 0
cambio <- TRUE
#datos <- cbind(1, datos)
iter <- 1
betterw <- vini
while(cambio && iter <= max_iter){
w <- vini
for(i in 1:length(label)){
if(signo(t(w)%*%datos[i,]) != label[i]){
prevE <- Ein(datos, betterw, label)
w <- w + label[i]*datos[i,]
postE <- Ein(datos, w, label)
if(prevE >= postE)
betterw <- w
}
}
s <- abs(sum(w - vini))
if(s <= 10e-10)
cambio = FALSE
vini <- w
iter <- iter + 1
}
if(Ein(datos, vini, label) < Ein(datos, betterw, label))
sol <-pasoARecta(vini)
else
sol <- pasoARecta(betterw)
list(sol, iter)
}
#   Esta función se encarga de generar una lista de matrices de 16*16, que contiene cada una
#   un numero (representado por su escala de grises).
generarLista <- function(D){
nDatos <- length(D$V1)
lista <- list()
for(i in 1:nDatos){
matrizActual <- D[i,]
lista[[i]] <- matrix(as.numeric(matrizActual[2:257]), nrow=16, ncol=16)
}
lista
}
#   Esta función se encarga de calcular la simetría de una matriz
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
#   Esta función se encarga de calcular la intensidad de una matriz utilizando la función
#   mean()
fIntensidad <- function(M){
mean(M)
}
# Se cambia el directorio de trabajo, y se carga en una variable el fichero zip.train, del que se va a obtener la matriz de 1 y 5
setwd("./datos")
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digitos48.train <- digit.train[digit.train$V1==4 | digit.train$V1==8,]
lista48 <- generarLista(digitos48.train)
#   Se crea un vector de simetrías, que se obtienen al utilizar la funcion fsimetria
vSimetrias <- c()
for(i in 1:length(lista48)){
vSimetrias[i] <- fSimetria(lista48[[i]])
}
#   Se crea un vector de simetrias, que se obtienen al utilizar la función fintensidad
vIntensidades <- c()
for(i in 1:length(lista48)){
vIntensidades[i] <- fIntensidad(lista48[[i]])
}
#   Se obtienen las etiquetas de los 1 y 5, modificando la de 1 a -1 y la de 5 a 1, para poder utilizar la regresion lineal
#   Con las simetrias e intensidades se crea la matriz de datos, y se calcula la regresion lineal con esta matriz y las etiquetas
#   Antes de llamar a la función, es necesario añadir una columna de 1s a la matriz datos
vEtiquetas <- digitos48.train$V1
vEtiquetas[vEtiquetas==8] <- 1
vEtiquetas[vEtiquetas==4] <- -1
datos <- matrix(c(rep(1, length(vIntensidades)),vIntensidades, vSimetrias), ncol = 3)
ajuste <- PLA_pocket(datos, vEtiquetas, 1000, c(0,0,0))
w <- ajuste[[1]]
plot(x=vIntensidades, y=vSimetrias, col=vEtiquetas+3, xlab = 'x_axis', ylab = 'y_axis')
curve(w[1]*x+w[2], add = TRUE)
